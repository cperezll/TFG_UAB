/*********************************************************************************/
/*********************************************************************************/
/****************  TFG INGEIERIA ELECTRONICA DE TELECOMUNCACIONS  ****************/
/****************         UNIVERSITAT ATONOMA DE BARCELONA        ****************/
/*********************************************************************************/
/*********************************************************************************/
/*
Autor     : Cristian Perez Llurba
DataInici : 22/10/2017
DataFinal : 15/01/2018

-- INDEX ------------------------------------------------------------------------
~ DESCRIPIO DE VARIABLES
  1. Libreriras
  2. Sensores
    2.0 Entradas analogicas de los sensores
    2.1 Variables termistor NTC (S&H)
    2.2 Sensores NTC (cara caliente/fria)
    2.3 Sensor de refrigeración
    2.4 Variables control grafic temperatura
    2.5 Sensor perltier
    
  3. Pines Configuracion RGB (indicador estado temperatura)
  4. Estado del ventilador
  5. Pantalla LCD 16x2
  6.Control de la lógica PID
  7.Control poténcia de salida célula peltier
  8.Regrifaracion cara caliente
  9.Tiempos de espera
  
~ CONFIGURACION DE LOS ESTADOS
  10.0. Configuración de los puertos de entrada/salida
    10.1. Baudios por simbolo
    10.2. INPUTS
    10.3. OUTPUTS
    10.3.0. Estados del ventilador refrigerador
    10.3.1. Salida de alarma/bozina
    10.3.2. Control del motor refrigerador
    10.3.3. Control motor de seguridad
    10.3.4. Salida del led RGB 
    10.3.5. Control PID "MEJORA DE FUTURO"
    10.3.6. Inicializacion del LCD
    
~ PROGGRAMA PRINCIPAL (MAIN)
  11.1. Programa Principal (main) 
    11.1.1 Tension salida celula Peltier 
    11.1.2 Parametros de los sensores 
    11.1.3 Sensor Temepratura Refrigeración
    11.1.4 Informacion bus serie
    11.1.5 Control automatico de la refrigeración
    11.1.6 Estado alarma 
    11.1.7 Estat temperatrua cara fria
    11.1.8 Información Temperatura LCD 
    11.1.9 Espera General
    
~ FUNCIONES Y METODOS
  12.0  Change Color With Function 
  13.0  Automatical Activation of Ventilador
  14.0  Automatic Activation of Temperature Alarm
  15.0  Configuración alarma 
---------------------------------------------------------------------------------


/*==============================================================================*/
/*===================== DESCRIPIO DE VARIABLES =================================*/
/*==============================================================================*/
  /* 1. Libreriras
  Libreries necesaries per aquest projecte Harbesten*/
  #include <math.h>
  #include <Wire.h> 
  #include <LiquidCrystal_I2C.h>
  #include <TimerOne.h>
  /* 2. Sensores
  /* 2.0 Entradas analogicas de los sensores*/ 
  const int R1hot                 = 10000;         //Valor de la resistencia
  const int R1cold                = 10000;         //Valor de la resistencia
  const int Vcc                   = 5;             //Tensio Alimentació Control

  /* 2.1 Variables termistor NTC (S&H)*/
      float A                     = 0.8511839802e-3;
      float B                     = 2.606091443e-4;
      float C                     = 1.312317359e-7;
      float K                     = 8;             //factor de disipacion en mW/C
      
  /*2.2 Sensores NTC (cara caliente/fria)*/
      const int SensorFaceHot     = A0;            //Sensor input cara calenta
      const int SensorFaceCold    = A1;            //Sensor input cara freda

  /*2.3 Sensor de refrigeración  */
    const int SensorRadiador      = A3;              //Sensor del radiador
    int   lecturaDisipador        = 0;               //variable donde se almacenaran datos del sensor (0 - 255)
    float voltajeLecturaDisipador = 0;
    float tempDisipador           = 0;  
    
  /*2.4 Variables control grafic temperatura*/
      boolean tin80               = false;         //Indica el periode de calentament inicial
      boolean tin45               = false;         //Indica el periode de refredament inicial
      boolean thot                = false;         //Temps d'estancia sobre la cara calenta (160ºC)
      int countTHot               = 0;             //Temps d'estancia cara calenta. Contador 
                                                   //comptador inizialitzat a cero.
      int countTCold              = 0;             // Temps d'estancia cara freda.
                                                
  /*2.5 Sensor perltier*/
      const int SensorPeltier     = A2;            //Sensor celu.la peltier 
      
/*3. Pines Configuracion RGB (indicador estado temperatura)*/
  const int Red                   = 11;             //rgb pin 9 arduino
  const int Green                 = 10;            //rgb pin 10 arduino
  const int Blue                  = 9;            //rgb pin  11 arduino

/*4. Estado del ventilador */
  const int VentiladorOFF         = 4;
  const int VentiladorON          = 2;
  const int VentiladorTranscruso  = 7;

/*5. Pantalla LCD 16x2 */
  const int InputP1               = A4;             //Pantalla LCD 16x2
  const int InputP2               = A5;             //Pantalla LCD 16x2
  LiquidCrystal_I2C lcd(0x3f,16,2);                 // Inicia el LCD en la dirección 0x27, con 16 caracteres y 2 líneas*/
  
/*6. Control de la lógica PID*/
  boolean SetVentildor            = false;          //Indica si el ventilador s'ençen
  boolean SetBotzina              = false;          //Indica si la botzina s'ençen
  const int Alarm                 = 12;             //Avisador Acustic (botzina)  
  const int pwmMotorRefr          = 3;              //Controlador de la regulació de gir moto Ventilador

/*7. Control poténcia de salida célula peltier */
  const int PID                   = 6;              // Regulacio Potencia Celula Pletier

/*8. Regrifaracion cara caliente*/
  const int RefrigeracionLimite   = 5;              // Refrigeracion EXTREMA para no superar los 70ºC 

/*9. Tiempos de espera */    
  const int espera                = 500;            // Tiempo de espera del programa general
  const int esperaBotzina         = 50;             // Tiempo de espera bozina no critica
  const int esperaBotzinaCritico  = 100;            // Tiempo de espera bozina critica
  const int timeLed               = 20;             // Tiempo de espera de los LED's
/*==============================================================================*/

/*==============================================================================*/
/*========================== Configuración de   ================================*/
/*==========================    los estados     ================================*/
/*==============================================================================*/

/*10.0. Configuración de los puertos de entrada/salida */
void setup()  
{
  /*10.1. Baudios por simbolo */
  Serial.begin(9600);
  
  /*10.2. INPUTS  */
  /* Las entradas analógicas del arduino las detecta automaticamente */
  /*10.3. OUTPUTS */
    /*10.3.0. Estados del ventilador refrigerador*/ 
      pinMode(VentiladorOFF,OUTPUT);
      pinMode(VentiladorON,OUTPUT);
      pinMode(VentiladorTranscruso,OUTPUT);
      
    /*10.3.1. Salida de alarma/bozina*/ 
      pinMode(Alarm,OUTPUT);
      
    /*10.3.2. Control del motor refrigerador*/
      pinMode(pwmMotorRefr,OUTPUT);
      
    /*10.3.3. Control motor de seguridad*/
      pinMode(RefrigeracionLimite,OUTPUT);

    /*10.3.4. Salida del led RGB */
      pinMode(Red,OUTPUT); 
      pinMode(Green,OUTPUT);
      pinMode(Blue,OUTPUT);

    /*10.3.5. Control PID *//*"MEJORA DE FUTURO"*/
      pinMode(PID,OUTPUT);
    
    /*10.3.6. Inicializacion del LCD*/
      lcd.init();                                   // Inicializamos el lcd
      lcd.backlight();                              // Activación luz lcd
}
/*==============================================================================*/
/*========================== Programa Principal ================================*/
/*==============================================================================*/
/*11.1. Programa Principal (main)*/ 
void loop(){
/*------- 11.1.1 Tension salida celula Peltier ---------------------------------*/  
  float rawPer    = analogRead(SensorPeltier);
  float VPerTest  = (rawPer/1024*Vcc);
  int   VPer      = VPerTest*100; 
/*------------------------------------------------------------------------------*/  

/*------- 11.1.2 Parametros de los sensores ------------------------------------*/    
  float rawHot    = analogRead(SensorFaceHot);
  float Vhot      =  rawHot / 1024 * Vcc;
  float R2hot     = (R1hot * Vhot) / (Vcc - Vhot);
 
  float logR2hot  = log(R2hot);
  float R_th_Hot  = 1.0/((A)+(B*logR2hot)+(C*logR2hot*logR2hot*logR2hot));
 
  float kelvinHot = R_th_Hot - Vhot*Vhot/(K * R2hot)*1000;
  float celsiusHot= kelvinHot - 273.15;
  const int celsiusHotADC = celsiusHot*100;

  float rawCold   = analogRead(SensorFaceCold);
  float Vcold     =  rawCold / 1024 * Vcc;
  float R2cold    = (R1cold * Vcold) / (Vcc - Vcold);
 
  float logR2cold  = log(R2cold);
  float R_th_Cold  = 1.0/((A)+(B*logR2cold)+(C*logR2cold*logR2cold*logR2cold));
 
  float kelvinCold = R_th_Cold - Vcold*Vcold/(K * R2cold)*1000;
  float celsiusCold = kelvinCold - 273.15; 
  const int celsiusColdADC = celsiusCold*100;
/*-----------------------------------------------------------------------------*/

/*------- 11.1.3 Sensor Temepratura Refrigeración -----------------------------*/
lecturaDisipador = analogRead(SensorRadiador);      //Lectura del sensor en un rango de 0 a 1023
voltajeLecturaDisipador = 5.0 / 1024 * lecturaDisipador;
tempDisipador = voltajeLecturaDisipador * 100;
/*-----------------------------------------------------------------------------*/

/*------- 11.1.4 Informacion bus serie ----------------------------------------*/
  Serial.print(celsiusHotADC);
  Serial.print(",");
  Serial.print(celsiusColdADC);
  Serial.print(",");
  Serial.println(VPer);
/*------------------------------------------------------------------------------*/

/*------- 11.1.5 Control automatico de la refrigeración ------------------------*/
  SetVentildor  = SetTemperature(celsiusCold); 
  SetBotzina    = SetStatusCelPertier(celsiusHot); 
  /*mira el lado caliente de la celula peltier, ya que este alcanzara antes 
   la temperatura permitida (210ºC)*/
  
  if(celsiusCold > 40){   
   if(celsiusCold>=80){
    analogWrite(RefrigeracionLimite,255);    /*Activacion de la refrigeracion de refuerzo para asi asegurar 
                                          que no se destruyen por temepraruta los componentes de la instalacion*/            
   }else if(celsiusCold<=79){
     analogWrite(RefrigeracionLimite,0);
   }
   
   if(SetVentildor || tin45){
    if(tin80){
      countTHot++;
      if(countTHot>=100 && !tin45){                                     
      /* Contador estado i inicial/calentamiento celula Peltier*/
        
        delay(20);
        if(celsiusCold>=77.5){                              // 3% <Tmax
          digitalWrite(VentiladorON,HIGH);
          digitalWrite(VentiladorOFF,LOW);
          analogWrite(pwmMotorRefr,255); 
          delay(timeLed);                               
        }else if(celsiusCold<=77.4 && celsiusCold>=45.6){   // 7.75% <Tmax
          analogWrite(pwmMotorRefr,255);
          digitalWrite(VentiladorON,LOW);                              
          digitalWrite(VentiladorOFF,LOW);                    
          digitalWrite(VentiladorTranscruso,HIGH);          
          delay(timeLed);
        }else if(celsiusCold<=45.5){                        // 12.5% <Tmax
          countTHot=0;
          tin45=true;
        }
      }else if(tin45){
        digitalWrite(VentiladorON,HIGH);
        digitalWrite(VentiladorOFF,LOW); 
        digitalWrite(VentiladorTranscruso,LOW);
        delay(timeLed);
        analogWrite(pwmMotorRefr,70);
        countTCold++;
        if(countTCold=100){
          digitalWrite(VentiladorON,LOW);
          digitalWrite(VentiladorOFF,HIGH); 
          digitalWrite(VentiladorTranscruso,LOW);
          delay(timeLed);
          analogWrite(pwmMotorRefr,0); 
          tin80=false;
          tin45=false;
        }
      }
    }
    }else if(!SetVentildor){
      digitalWrite(VentiladorON,LOW);
      digitalWrite(VentiladorOFF,HIGH);
      digitalWrite(VentiladorTranscruso,LOW);
      delay(timeLed);
      analogWrite(pwmMotorRefr,0);
      tin45=false;  
      tin80=false;
    }
  }
/*------------------------------------------------------------------------------*/

/* ------- 11.1.6 Estado alarma ------------------------------------------------*/
  statusAlarm(SetBotzina,celsiusCold);
/*------------------------------------------------------------------------------*/

/*------- 11.1.7 Estat temperatrua cara fria -----------------------------------*/    
  if(celsiusHot<=25){                                     //  AzulCielo
    Color(0,255,0);
  }else if((celsiusHot>=26)&&(celsiusHot<=45)){           //  Verde
    Color(255,0,0);
  }else if((celsiusHot>=46)&&(celsiusHot<=65)){           //  Amarillo
    Color(255,255,0);
  }else if((celsiusHot>=67)&&(celsiusHot<=79)){           //  Llila
    Color(255,0,255);
  }else if(celsiusHot<=80){                               //  Rojo
    Color(0,0,255);
  }
/*------------------------------------------------------------------------------*/

/*------- 11.1.8 Información Temperatura LCD -----------------------------------*/
  lcd.setCursor(0,0);
  lcd.print("T HotSide :");
  lcd.print(celsiusHot);
  lcd.setCursor(0,1);
  lcd.print("T ColdSide:");
  lcd.print(celsiusCold);
/*------------------------------------------------------------------------------*/

/*------- 11.1.9 Espera General  -----------------------------------------------*/
  delay(espera);
/*------------------------------------------------------------------------------*/
}

/*==============================================================================*/
/*===================== FUNCIONES Y METODOS ====================================*/
/*==============================================================================*/
/*----------------12.0 Change Color With Function -------------------------------*/
void Color(int R, int G, int B)
{
  analogWrite(Red,R);      
  analogWrite(Green,G);    
  analogWrite(Blue,B);     
}
/*------------------------------------------------------------------------------*/
/*--------------- 13.0 Automatical Activation of Ventilador ---------------------*/
boolean SetTemperature(float Thot){

  boolean activeVentildor = false;
  if(!tin45 && ((Thot>=77.6) || (tin80))){ 
    tin80=true;                                 /*tiempo de inicio superado para 
                                                  calentar la celula a 160ºC*/
    tin45=false;
    activeVentildor = true;
  }else if((Thot<=44) && (tin45)){ 
    activeVentildor = false;
  }else{
    activeVentildor = false;
  }
  return activeVentildor;
}
/*------------------------------------------------------------------------------*/
/*-------------- 14.0 Automatic Activation of Temperature Alarm -----------------*/
boolean SetStatusCelPertier(float Thot){

  boolean activeBotzina = false;
  if(Thot>=77.7){
    activeBotzina = true;
  }
  return activeBotzina;
}
/*------------------------------------------------------------------------------*/

/*-------------- 15.0 Configuración alarma --------------------------------------*/
void statusAlarm(boolean temperaturaAlarma, int tempHot){
  
  if (temperaturaAlarma){
    if(tempHot>=85){
      digitalWrite(Alarm, HIGH);                    
      delay(esperaBotzinaCritico);
      digitalWrite(Alarm, LOW);                    
      delay(esperaBotzinaCritico);
      digitalWrite(Alarm, HIGH);                    
      delay(esperaBotzinaCritico);
      digitalWrite(Alarm, LOW);                    
    }else if(tempHot>77.7 && tempHot<85){
      digitalWrite(Alarm, HIGH);                    
      delay(esperaBotzina);
      digitalWrite(Alarm, LOW);                     
      delay(esperaBotzina);
      digitalWrite(Alarm, HIGH);                    
      delay(esperaBotzina);
      digitalWrite(Alarm, LOW);                      
    }
  }else if(tempHot>=200){
    /*Activacio permanente de la bozina para su información de zona de peligro 
    por destrución de componente celula peltier*/
    digitalWrite(Alarm, HIGH);  
  }else{
    digitalWrite(Alarm, LOW);                     
  }  
}
/*------------------------------------------------------------------------------*/